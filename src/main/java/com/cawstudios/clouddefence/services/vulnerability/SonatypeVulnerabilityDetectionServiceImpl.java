package com.cawstudios.clouddefence.services.vulnerability;

import com.cawstudios.clouddefence.helpers.ConsoleIOHelper;
import com.cawstudios.clouddefence.helpers.HttpClientHelper;
import com.cawstudios.clouddefence.mappers.vulnerability.VulnerabilityModelMapper;
import com.cawstudios.clouddefence.models.sbom.cyclone_dx.SbomComponentModel;
import com.cawstudios.clouddefence.models.sbom.cyclone_dx.SbomModel;
import com.cawstudios.clouddefence.models.vulnerability.VulnerablePackageModel;
import com.cawstudios.clouddefence.models.vulnerability.sonatype.SonatypeRequestModel;
import com.cawstudios.clouddefence.models.vulnerability.sonatype.SonatypeResponseModel;
import com.cawstudios.clouddefence.models.vulnerability.sonatype.SonatypeVulnerablePackageResponseModel;
import com.cawstudios.clouddefence.services.BaseService;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micronaut.context.annotation.Value;
import jakarta.inject.Inject;
import jakarta.inject.Singleton;

import java.io.IOException;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import java.util.List;

@Singleton
public class SonatypeVulnerabilityDetectionServiceImpl extends BaseService implements VulnerabilityDetectionService {

    private static final String SONATYPE_URL = "https://ossindex.sonatype.org/api/v3/component-report";

    @Value("${sonatype.token}")
    private String sonatypeToken;

    @Inject
    public HttpClientHelper httpClientHelper;

    @Inject
    ConsoleIOHelper consoleIOHelper;

    @Inject
    public VulnerabilityModelMapper vulnerabilityModelMapper;

    @Override
    public List<VulnerablePackageModel> checkVulnerabilityByPurls(List<String> purls) {
        int skip = 0;
        int take = 45;
        int batchSize = 45;
        int batches = (purls.size() - 1)/batchSize;

        if (batches == 0) {
            take = purls.size() - 1;
            batches = 1;
        }
        List<SonatypeVulnerablePackageResponseModel> sonatypeVulnerabilityDetailResponseModels = new ArrayList<>();

//        for (int batch = 0; batch < batches; batch++) {
            SonatypeRequestModel body = new SonatypeRequestModel();
            body.setCoordinates(purls.subList(0, 20));

            List<SonatypeVulnerablePackageResponseModel> responseModels = callSonatypeAPI(body);
            sonatypeVulnerabilityDetailResponseModels.addAll(responseModels);

//            skip = take + 1;
//            take = take > purls.size()? take + batchSize: purls.size() - 1;
//        }
//        ObjectMapper objectMapper = new ObjectMapper();
        return vulnerabilityModelMapper.toVulnerablePackageModels(sonatypeVulnerabilityDetailResponseModels);
    }

    @Override
    public List<VulnerablePackageModel> checkVulnerabilityByBomDto(SbomModel sbomModel) {
        List<String> purls = new ArrayList<>();
        List<SbomComponentModel> sbomComponentModels = sbomModel.getComponents();
        if (sbomComponentModels != null) {
            sbomComponentModels.forEach(sbomComponentModel -> purls.add(sbomComponentModel.getPurl()));
        }
        return checkVulnerabilityByPurls(purls);
    }

    private List<SonatypeVulnerablePackageResponseModel> callSonatypeAPI(SonatypeRequestModel sonatypeRequestModel) {
        SonatypeResponseModel sonatypeResponseModel = new SonatypeResponseModel();
        try {
            HttpResponse<String> response = httpClientHelper.post(SONATYPE_URL, sonatypeRequestModel, this.sonatypeToken);

            ObjectMapper objectMapperResponse = new ObjectMapper();
            if (response.statusCode() == 200) {
                List<SonatypeVulnerablePackageResponseModel> sonatypeVulnerablePackageResponseModels = objectMapperResponse.readValue(
                        response.body(), new TypeReference<>() {});
                sonatypeResponseModel.setCode(response.statusCode());
                sonatypeResponseModel.setSonatypeVulnerablePackageResponseModels(sonatypeVulnerablePackageResponseModels);
            } else {
                sonatypeResponseModel = objectMapperResponse.readValue(
                        response.body(),
                        new TypeReference<>() {
                        });
            }

        } catch (IOException | InterruptedException e) {
            consoleIOHelper.println("Error occurred while calling API");
        }

        return sonatypeResponseModel.getSonatypeVulnerablePackageResponseModels();
    }
}
